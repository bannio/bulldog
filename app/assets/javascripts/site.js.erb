//= depend_on_asset "door_dog.png"
var SITENAME,
    STRIPE,
    UTIL,
    VIDEO,
    SELECT,
    TABLES;

SITENAME = {
  common: {
    init: function () {
    // application-wide code
      console.log("SITE init common");
      // fix for Select2 not working in modals.
      // overwrite the function with an empty function block
      $.fn.modal.Constructor.prototype.enforceFocus = function () {};
      // Cookie alert
      $('.cookies-eu-ok').click(function (e) {
        e.preventDefault();
        $.cookie('cookie_eu_consented', 'true', { path: '/', expires: 365 });
        $('.cookies-eu').remove();
      });
      // iOS check
      if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {
        $('.modal').on('show.bs.modal', function () {
        // Position modal absolute and bump it down to the scrollPosition
          $(this)
            .css({
              position: 'absolute',
              marginTop: $(window).scrollTop() + 'px',
              bottom: 'auto'
            });
        // Position backdrop absolute and make it span the entire page
        //
        // Also dirty, but we need to tap into the backdrop after Boostrap
        // positions it but before transitions finish.
        //
          setTimeout(function () {
            $('.modal-backdrop').css({
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              height: Math.max(
                document.body.scrollHeight,
                document.documentElement.scrollHeight,
                document.body.offsetHeight,
                document.documentElement.offsetHeight,
                document.body.clientHeight,
                document.documentElement.clientHeight
              ) + 'px'
            });
          }, 0);
        });
      };
      // Date picker used in many places
      $("input.date_picker").datepicker({
        dateFormat: "yy-mm-dd",
        changeMonth: true,
        changeYear: true
      });
    }
  },

  accounts: {
    init: function () {
    // controller-wide code
    },

    new: function () {
    // action-specific code
      console.log("accounts#new");
      $('#card_number').payment('formatCardNumber');
      $('#card_code').payment('formatCardCVC');
      $('#cc_exp').payment('formatCardExpiry');
      Stripe.setPublishableKey('<%= STRIPE_PUBLIC_KEY %>');
      return STRIPE.setupForm();
    },

    new_card: function () {
    // action-specific code
      console.log("accounts#new_card");
      $('#card_number').payment('formatCardNumber');
      $('#card_code').payment('formatCardCVC');
      $('#cc_exp').payment('formatCardExpiry');
      Stripe.setPublishableKey('<%= STRIPE_PUBLIC_KEY %>');
      return STRIPE.setupForm();
    },

    update_card: function () {
    // action-specific code
      console.log("accounts#new_card");
      $('#card_number').payment('formatCardNumber');
      $('#card_code').payment('formatCardCVC');
      $('#cc_exp').payment('formatCardExpiry');
      Stripe.setPublishableKey('<%= STRIPE_PUBLIC_KEY %>');
      return STRIPE.setupForm();
    },

    create: function () {
    // action-specific code
    // reset env vars for production
      console.log("accounts#create");
      $('#card_number').payment('formatCardNumber');
      $('#card_code').payment('formatCardCVC');
      $('#cc_exp').payment('formatCardExpiry');
      Stripe.setPublishableKey('<%= STRIPE_PUBLIC_KEY %>');
      return STRIPE.setupForm();
    },

    edit: function () {
      console.log("accounts#edit");
      SELECT.accountPlan();
    },

    update: function () {
      console.log("accounts#edit");
      SELECT.accountPlan();
    }
  },

  welcome: {
    index: function () {
      console.log("welcome#index");
      $('#first_sign_in_modal').modal('show');
    }
  },

  pages: {
    show: function () {
      console.log("pages#show");
      VIDEO.checkForVideos();
    }
  },

  help: {
    video: function () {
      console.log("help#video");
      VIDEO.checkForVideos();
    }
  },

  bills: {
    index: function () {
      console.log("bills#index");
      SELECT.billCustomer();
      SELECT.billSupplier();
      SELECT.billCategory();
      SELECT.billVatRate();
      TABLES.clickable_row();
    }
  },

  invoices: {
    index: function () {
      console.log("invoices#index");
      TABLES.clickable_row();
      SELECT.invCustomer();
    },
    edit: function () {
      console.log("invoices#edit");
      $("#bill_table_body").on("click", "td.remove-col", function () {
        $(this).parent().toggleClass("line-through");
      });
      SELECT.invoiceHeader();
    },
    new: function () {
      console.log("invoices#new");
      SELECT.invoiceCustomer();
      SELECT.invoiceHeader();
    },
    create: function () {
      console.log("invoices#create");
      SELECT.invoiceCustomer();
      SELECT.invoiceHeader();
    }
  },

  vat_rates: {
    index: function () {
      console.log("vat_rates#index");
      TABLES.clickable_row();
    }
  },

  categories: {
    index: function () {
      console.log("categories#index");
      TABLES.clickable_row();
    }
  },

  customers: {
    index: function () {
      console.log("customers#index");
      TABLES.clickable_row();
    }
  },

  suppliers: {
    index: function () {
      console.log("suppliers#index");
      TABLES.clickable_row();
    }
  },

  reports: {
    new: function () {
      console.log("reports#new");
      $("#exportBtn").on("click", function () { $('#new_report').submit(); });
    },
    create: function () {
      console.log("reports#create");
      $("#exportBtn").on("click", function () { $('#new_report').submit(); });
    },
  }
};

VIDEO = {
  checkForVideos: function () {
    if ($('video').length > 0) {
      var videos, video;
      videos = $('video');
      videos.each(function () {
        video = $(this).attr('id');
        VIDEO.reset(video);
        VIDEO.init(video);
      });
    }
  },
  reset: function (videoId) {
    var vid;
    console.log("resetting " + videoId);
    for (vid in _V_.players ) {
      console.log("found player for: " + vid.toString());
      if (vid.toString() === videoId) {
        delete _V_.players[vid];
        console.log("reset " + videoId);
      }
    }
  },
  init: function (videoId) {
    var id = "#" + videoId;
    console.log("checking for " + videoId + " existance");
    if ($(id).length > 0) {
      videojs(videoId, {
        'controls': true,
        'preload': 'auto',
        'width': '640px',
        'height': '360px'
      }, function () {
        // Player (this) is initialized and ready.
        console.log("video " + videoId + " initialised");
      });
    }
  }
};

SELECT = {
  format: function (item) {
    return item.name || item.text;
  },
  text: function (value) {
    if (value[0]) {
      return value[0].name;
    }
    return "";
  },
  format_result: function (term) {
    if (term.isNew) {
      return '<span class="label label-important">New</span> ' + term.text;
    }
    return term.name;
  },
  create_choice: function (term, data) {
    if ($(data).filter(function () {
        return this.name.toLowerCase().localeCompare(term.toLowerCase()) === 0;
      }).length === 0) {
      return {id: term, text: term, isNew: true};
    }
  },
  accountPlan: function () {
    var PlanData = $('#account_plan_id').data('plans');
    $('#account_plan_id').select2({
      placeholder: 'Plan',
      allowClear: true,
      width: 'resolve',
      data: {results: PlanData, text: 'name'},
      formatResult: SELECT.format,
      formatSelection: SELECT.format
    });
  },
  billCustomer: function () {
    var customerData = $('#bill_customer_id').data('customers');
    $('#bill_customer_id').select2({
      placeholder: 'Customer',
      allowClear: true,
      width: 'resolve',
      data: {results: customerData, text: 'name'},
      initSelection : function (element, callback) {
        var value = $(customerData).filter(function () {
            return this.id == element.val();
          });
        var data = {id: element.val(),
                    text: SELECT.text(value)};
        callback(data);
      },
      createSearchChoice: SELECT.create_choice,
      formatResult: SELECT.format_result,
      formatSelection: SELECT.format
    });
  },
  billSupplier: function () {
    var supplierData = $('#bill_supplier_id').data('suppliers');
    $('#bill_supplier_id').select2({
      placeholder: 'Supplier',
      allowClear: true,
      width: 'resolve',
      data: {results: supplierData, text: 'name'},
      initSelection : function (element, callback) {
        var value = $(supplierData).filter(function () {
          return this.id == element.val();
        });
        var data = {id: element.val(),
                    text: SELECT.text(value)};
        callback(data);
      },
      createSearchChoice: SELECT.create_choice,
      formatResult: SELECT.format_result,
      formatSelection: SELECT.format
    });
  },
  billCategory: function () {
    var categoryData = $('#bill_category_id').data('categories');
    $('#bill_category_id').select2({
      placeholder: 'Category',
      allowClear: true,
      width: 'resolve',
      data: {results: categoryData, text: 'name'},
      initSelection : function (element, callback) {
        var value = $(categoryData).filter(function () {
          return this.id == element.val();
        });
        var data = {id: element.val(),
                    text: SELECT.text(value)};
        callback(data);
      },
      createSearchChoice: SELECT.create_choice,
      formatResult: SELECT.format_result,
      formatSelection: SELECT.format
    });
  },
  billVatRate: function () {
    var vatRateData = $('#bill_vat_rate_id').data('vat-rates');
    $('#bill_vat_rate_id').select2({
      placeholder: 'VAT rate',
      allowClear: true,
      width: 'resolve',
      data: {results: vatRateData, text: 'name'},
      formatResult: SELECT.format_result,
      formatSelection: SELECT.format
    });
  },
  invoiceCustomer: function () {
    var invoiceCustomerData = $('#invoice_customer_id').data('customers');
    $('#invoice_customer_id').select2({
      placeholder: 'Customer',
      allowClear: true,
      width: 'resolve',
      data: {results: invoiceCustomerData, text: 'name'},
      formatResult: SELECT.format,
      formatSelection: SELECT.format
    });
  },
  invCustomer: function () {
    var invCustomerData  = $('#inv_customer_id').data('customers');
    $('#inv_customer_id').select2({
      placeholder: 'by customer',
      allowClear: true,
      width: 'resolve',
      data: {results: invCustomerData, text: 'name'},
      initSelection : function (element, callback) {
        var value = $(invCustomerData).filter(function () {
          return this.id == element.val();
        });
        var data = {id: element.val(),
                    text: SELECT.text(value)};
        callback(data);
      },
      formatResult: SELECT.format,
      formatSelection: SELECT.format
    });
  },
  invoiceHeader: function () {
    var invoiceHeaderData = $('#invoice_header_id').data('headers');
    $('#invoice_header_id').select2({
      placeholder: 'Header',
      maximumInputLength: 27,
      allowClear: true,
      width: 'resolve',
      data: {results: invoiceHeaderData, text: 'name'},
      initSelection : function (element, callback) {
        var value = $(invoiceHeaderData).filter(function () {
            return this.id == element.val();
          });
        var data = {id: element.val(),
                      text: SELECT.text(value)};
        callback(data);
      },
      createSearchChoice: SELECT.create_choice,
      formatResult: SELECT.format_result,
      formatSelection: SELECT.format
    });
  }
};

TABLES = {
  clickable_row: function () {
    // This function is adapted to work on either data-rowlink (invoices)
    // or data-url (bills) within a table where the rows have a class of
    // rowlink. If/when the invoices table changes to JS then this could
    // be simplified. Note that data-rowlink results in an HTML
    $('tbody').on('click', 'tr.rowlink', function (e) {
      var link = $(this).data("url");
      var link2 = $(this).data("rowlink");
      if (link) {
        $.getScript(link);
        e.stopImmediatePropagation();
      } else if (link2) {
        window.location = link2;
      } else {
        return false;
      }
    });
  }
};

STRIPE = {
  setupForm: function () {
    console.log("STRIPE setupForm");
    return $('form').submit(function () {
    // must only have one form on the page as the selector above
    // does not target an id so that the same code can be used on
    // both new account and new card. Old specific target was:
    // return $('#new_account').submit(function () {
      var expiry, validateExpiry, card, validCard, cvc, validCvc;
      $('input[type=submit]').attr('disabled', true);
      $('.card-number').removeClass('field_with_errors');
      $('.card-expiration').removeClass('field_with_errors');

      card = $('#card_number').val();
      validCard = $.payment.validateCardNumber(card);
      expiry = $('#cc_exp').payment('cardExpiryVal');
      validateExpiry = $.payment.validateCardExpiry(expiry);

      if (!validCard) {
        STRIPE.invalidCard();
        return false;
      }

      cvc = $('#card_code').val();
      validCvc = $.payment.validateCardCVC(cvc);
      if (!validCvc) {
        STRIPE.invalidCVC();
        return false;
      }

      if (!validateExpiry) {
        STRIPE.invalidExpiry();
        return false;
      }

      if ($('#card_number').length) {
        STRIPE.processCard();
        return false; // so that form is not submitted yet
      }
      return true;
    });
  },

  processCard: function () {
    console.log("STRIPE process card");
    var expiry = $('#cc_exp').payment('cardExpiryVal');
    var card;
    card = {
      number: $('#card_number').val(),
      cvc: $('#card_code').val(),
      expMonth: expiry.month,
      expYear: expiry.year
    };
    return Stripe.createToken(card, STRIPE.handleStripeResponse);
  },

  handleStripeResponse: function (status, response) {
    if (status === 200) {
      $('#account_stripe_card_token').val(response.id);
      // return $('#new_account')[0].submit();
      return $('form')[0].submit();
    }
    $('#stripe_error').text(response.error.message);
    return $('input[type=submit]').attr('disabled', false);
  },

  invalidCard: function () {
    $('#stripe_error').text('invalid card number');
    $('.card-number').addClass('field_with_errors');
    return $('input[type=submit]').attr('disabled', false);
  },

  invalidExpiry: function () {
    $('#stripe_error').text('invalid expiry date');
    $('.card-expiration').addClass('field_with_errors');
    return $('input[type=submit]').attr('disabled', false);
  },

  invalidCVC: function () {
    $('#stripe_error').text('invalid security code');
    $('.cvc').addClass('field_with_errors');
    return $('input[type=submit]').attr('disabled', false);
  }
};

UTIL = {
  exec: function (controller, action) {
    var ns = SITENAME,
      action = (action === undefined) ? "init" : action;

    if (controller !== "" && ns[controller] && typeof ns[controller][action] === "function") {
      ns[controller][action]();
    }
  },

  init: function () {
    var body = document.body,
      controller = body.getAttribute("data-controller"),
      action = body.getAttribute("data-action");

    UTIL.exec("common");
    UTIL.exec(controller);
    UTIL.exec(controller, action);
  }
};

// $(document).ready( UTIL.init );
$(document).on('page:update', UTIL.init);